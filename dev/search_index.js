var documenterSearchIndex = {"docs":
[{"location":"QML/CircuitOptimization/#QuantumCircuits.QML.CircuitOptimization","page":"Gates","title":"QuantumCircuits.QML.CircuitOptimization","text":"","category":"section"},{"location":"QML/CircuitOptimization/","page":"Gates","title":"Gates","text":"Modules = [QuantumCircuits.QML.CircuitOptimization]","category":"page"},{"location":"1_Two-qubit-gates/#Quantum-Circuits-Library:-Two-qubit-gates","page":"Two-qubit gates","title":"Quantum Circuits Library: Two-qubit gates","text":"","category":"section"},{"location":"1_Two-qubit-gates/","page":"Two-qubit gates","title":"Two-qubit gates","text":"CurrentModule = QuantumCircuits.QCircuits.Gates","category":"page"},{"location":"1_Two-qubit-gates/#CX","page":"Two-qubit gates","title":"CX","text":"","category":"section"},{"location":"1_Two-qubit-gates/","page":"Two-qubit gates","title":"Two-qubit gates","text":"CX","category":"page"},{"location":"1_Two-qubit-gates/#QuantumCircuits.QCircuits.Gates.CX","page":"Two-qubit gates","title":"QuantumCircuits.QCircuits.Gates.CX","text":"CX(control::Qubit, target::Qubit)\n\nTwo-qubit controlled NOT gate with control and target on first and second qubits, respectively. This is also  called the controlled X gate.  Circuit Representation\n\nq_0: ──■──\n     ┌─┴─┐\nq_1: ┤ X ├\n     └───┘\n\nMatrix Representation\n\nCX = beginpmatrix\n    1  0  0  0 \n    0  1  0  0 \n    0  0  0  1 \n    0  0  1  0\n    endpmatrix\n\nqc = QCircuit(2)\nqc.cx(0, 1)\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/OtherGates/#QuantumCircuits.OtherGates","page":"OtherGates","title":"QuantumCircuits.OtherGates","text":"","category":"section"},{"location":"QCircuits/OtherGates/","page":"OtherGates","title":"OtherGates","text":"Modules = [QuantumCircuits.QCircuits.OtherGates]","category":"page"},{"location":"QCircuits/OtherGates/#QuantumCircuits.QCircuits.OtherGates.TwoQubitsRotationGate","page":"OtherGates","title":"QuantumCircuits.QCircuits.OtherGates.TwoQubitsRotationGate","text":"Rotation gates\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/OtherGates/#QuantumCircuits.QCircuits.Gates.getqubits-Tuple{QuantumCircuits.QCircuits.OtherGates.TwoQubitsRotationGate}","page":"OtherGates","title":"QuantumCircuits.QCircuits.Gates.getqubits","text":"Return the qubits on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/OtherGates/#QuantumCircuits.QCircuits.Gates.getqubitsids-Tuple{QuantumCircuits.QCircuits.OtherGates.TwoQubitsRotationGate}","page":"OtherGates","title":"QuantumCircuits.QCircuits.Gates.getqubitsids","text":"Return the qubits ids on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/OtherGates/#QuantumCircuits.QCircuits.OtherGates.@twoQubitsRotationGate-Tuple{Any}","page":"OtherGates","title":"QuantumCircuits.QCircuits.OtherGates.@twoQubitsRotationGate","text":"Rotation macro\n\n\n\n\n\n","category":"macro"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit","text":"","category":"section"},{"location":"QCircuits/Qiskit/","page":"Qiskit","title":"Qiskit","text":"Modules = [QuantumCircuits.QCircuits.Qiskit]","category":"page"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.NoQiskitError","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.NoQiskitError","text":"The error throw when there is no qiskit instaled.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.QiskitCircuit","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.QiskitCircuit","text":"Quantum circuit provided by Qiskit.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.QiskitDevice","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.QiskitDevice","text":"Quantum device provided by Qiskit.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.QiskitSimulator","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.QiskitSimulator","text":"Qiskit simulator\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Qiskit/#Base.show-Tuple{IO, QuantumCircuits.QCircuits.Qiskit.QiskitCircuit}","page":"Qiskit","title":"Base.show","text":"Show method\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.QBase.add!-Tuple{QuantumCircuits.QCircuits.Qiskit.QiskitCircuit, QuantumGate}","page":"Qiskit","title":"QuantumCircuits.QCircuits.QBase.add!","text":"Add gate to circuit\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.QBase.tomatrix-Tuple{QuantumCircuits.QCircuits.Qiskit.QiskitCircuit}","page":"Qiskit","title":"QuantumCircuits.QCircuits.QBase.tomatrix","text":"Get the matrix version of the cirquit.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.addQiskitCode-Tuple{QuantumCircuits.QCircuits.Qiskit.QiskitCircuit, QuantumCircuits.QCircuits.Gates.X}","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.addQiskitCode","text":"Add quantum gate to Qiskit circuit\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.draw-Tuple{QuantumCircuits.QCircuits.Qiskit.QiskitCircuit}","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.draw","text":"Draw the circuit.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.getQRegister-Tuple{QuantumCircuits.QCircuits.Qiskit.QiskitCircuit, AbstractString}","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.getQRegister","text":"Function return the register\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Qiskit/#QuantumCircuits.QCircuits.Qiskit.nop","page":"Qiskit","title":"QuantumCircuits.QCircuits.Qiskit.nop","text":"Nothing function\n\n\n\n\n\n","category":"function"},{"location":"QML/QML/#QuantumCircuits.QML","page":"QML","title":"QuantumCircuits.QML","text":"","category":"section"},{"location":"QML/QML/","page":"QML","title":"QML","text":"Modules = [QuantumCircuits.QML]","category":"page"},{"location":"QML/QML/#QuantumCircuits.QML","page":"QML","title":"QuantumCircuits.QML","text":"Quantum machine learning\n\n\n\n\n\n","category":"module"},{"location":"QCircuits/Instructions/#QuantumCircuits.QCircuits.Instructions","page":"Instructions","title":"QuantumCircuits.QCircuits.Instructions","text":"","category":"section"},{"location":"QCircuits/Instructions/","page":"Instructions","title":"Instructions","text":"Modules = [QuantumCircuits.QCircuits.Instructions]","category":"page"},{"location":"QCircuits/Instructions/#QuantumCircuits.QCircuits.Instructions.Barrier","page":"Instructions","title":"QuantumCircuits.QCircuits.Instructions.Barrier","text":"Universary two qubits gate.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Instructions/#QuantumCircuits.QCircuits.Gates.getqubits-Tuple{QuantumCircuits.QCircuits.Instructions.Barrier}","page":"Instructions","title":"QuantumCircuits.QCircuits.Gates.getqubits","text":"Return the qubits on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Instructions/#QuantumCircuits.QCircuits.Gates.getqubitsids-Tuple{QuantumCircuits.QCircuits.Instructions.Barrier}","page":"Instructions","title":"QuantumCircuits.QCircuits.Gates.getqubitsids","text":"Return the qubits ids on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Instructions/#QuantumCircuits.QCircuits.QBase.simplify-Tuple{QuantumCircuits.QCircuits.Instructions.Barrier}","page":"Instructions","title":"QuantumCircuits.QCircuits.QBase.simplify","text":"The simplify the gates.\n\n\n\n\n\n","category":"method"},{"location":"0_Single-qubit-gates/#Quantum-Circuits-Library:-Single-qubit-gates","page":"Single-qubit gates s","title":"Quantum Circuits Library: Single-qubit gates","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"CurrentModule = QuantumCircuits.QCircuits.Gates","category":"page"},{"location":"0_Single-qubit-gates/#U3","page":"Single-qubit gates s","title":"U3","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"U3","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.U3","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.U3","text":"U3(qubit::Qubit, θ::Parameter, ϕ::Parameter, λ::Parameter)\n\nUniversal single-qubit rotation gate with three Euler angles, theta, phi and lambda. Matrix Representation\n\nnewcommandthfractheta2\nU3(theta phi lambda) =\n    beginpmatrix\n        cos(th)           -e^ilambdasin(th) \n        e^iphisin(th)  e^i(phi+lambda)cos(th)\n    endpmatrix\n\nqc = QCircuit(1)\nqc.u3(0, 1, 2, 3)\n\nYou can also create a gate without adding parameters, in that case, they will be initialized by random values and can be used in Quantum Machine Learning as the loss function parameters.\n\nusing QuantumCircuits\nusing QuantumCircuits.QML\nusing QuantumCircuits.Execute\n\n# Expected circuit\nexpqc = QCircuit(1)\nexpqc.x(0)\nexpmat = tomatrix(expqc)\n\n# The ansact\nqc = QCircuit(1)\nqc.u3(0)\n\n# Find the parameters which fit the expected unitary matrix in the best way.\nfindparam(expmat, qc)\n\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Rx","page":"Single-qubit gates s","title":"Rx","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Rx","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Rx","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Rx","text":"Rx(qubit::Qubit, θ::Parameter)\n\nA single-qubit Pauli gate which represents rotation about the X axis. Matrix Representation\n\nnewcommandthfractheta2\nRx(theta) = exp(-i th X) =\n    beginpmatrix\n        costh    -isinth \n        -isinth  costh\n    endpmatrix\n\nqc = QCircuit(1)\nqc.rx(0, π/2)\n\nYou can also create a gate without adding parameter, in that case, it will be initialized by random values and can be used in Quantum Machine Learning as the loss function parameters.\n\nusing QuantumCircuits\nusing QuantumCircuits.QML\nusing QuantumCircuits.Execute\n\n# Expected circuit\nexpqc = QCircuit(1)\nexpqc.x(0)\nexpmat = tomatrix(expqc)\n\n# The ansact\nqc = QCircuit(1)\nqc.rx(0)\n\n# Find the parameters which fit the expected unitary matrix in the best way.\nfindparam(expmat, qc)\n\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Ry","page":"Single-qubit gates s","title":"Ry","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Ry","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Ry","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Ry","text":"Ry(qubit::Qubit, θ::Parameter)\n\nA single-qubit Pauli gate which represents rotation about the Y axis. Matrix Representation\n\nnewcommandthfractheta2\nRy(theta) = exp(-i th Y) =\n    beginpmatrix\n        costh  -sinth \n        sinth  costh\n    endpmatrix\n\nqc = QCircuit(1)\nqc.ry(0, π/2)\n\nYou can also create a gate without adding parameter, in that case, it will be initialized by random values and can be used in Quantum Machine Learning as the loss function parameters.\n\nusing QuantumCircuits\nusing QuantumCircuits.QML\nusing QuantumCircuits.Execute\n\n# Expected circuit\nexpqc = QCircuit(1)\nexpqc.y(0)\nexpmat = tomatrix(expqc)\n\n# The ansact\nqc = QCircuit(1)\nqc.ry(0)\n\n# Find the parameters which fit the expected unitary matrix in the best way.\nfindparam(expmat, qc)\n\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Rz","page":"Single-qubit gates s","title":"Rz","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Rz","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Rz","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Rz","text":"Rz(qubit::Qubit, θ::Parameter)\n\nA single-qubit Pauli gate which represents rotation about the Z axis.\n\nMatrix Representation\n\nnewcommandthfractheta2\nRz(theta) = exp(-ith Z) =\nbeginpmatrix\n    e^-ith  0 \n    0  e^ith\nendpmatrix\n\njulia qc = QCircuit(1) qc.rz(0, π/2)\n\n\nYou can also create a gate without adding parameter, in that case, it will be initialized by random values and can be used in Quantum Machine Learning as the loss function parameters.\n\njulia using QuantumCircuits using QuantumCircuits.QML using QuantumCircuits.Execute\n\nExpected circuit\n\nexpqc = QCircuit(1) expqc.z(0) expmat = tomatrix(expqc)\n\nThe ansact\n\nqc = QCircuit(1) qc.rz(0)\n\nFind the parameters which fit the expected unitary matrix in the best way.\n\nfindparam(expmat, qc)\n\n```\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#H","page":"Single-qubit gates s","title":"H","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"H","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.H","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.H","text":"H(qubit::Qubit)\n\nSingle-qubit Hadamard gate, which is a pi rotation about the X+Z axis, thus equivalent to U3(fracpi20pi) Matrix Representation\n\nH = frac1sqrt2\n        beginpmatrix\n            1  1 \n            1  -1\n        endpmatrix\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#X","page":"Single-qubit gates s","title":"X","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"X","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.X","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.X","text":"X(qubit::Qubit)\n\nSingle-qubit Pauli-X gate (sigma_x), equivalent to U3(pi0pi) Matrix Representation\n\nX = beginpmatrix\n0  1 \n1  0\nendpmatrix\n\nqc = QCircuit(1)\nqc.x(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Y","page":"Single-qubit gates s","title":"Y","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Y","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Y","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Y","text":"Y(qubit::Qubit)\n\nSingle-qubit Pauli-Y gate (sigma_y), equivalent to U3(pifracpi2fracpi2) Matrix Representation\n\nY = beginpmatrix\n0  -i \ni  0\nendpmatrix\n\nqc = QCircuit(1)\nqc.y(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Z","page":"Single-qubit gates s","title":"Z","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Z","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Z","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Z","text":"Z(qubit::Qubit)\n\nSingle-qubit Pauli-Z gate (sigma_z), equivalent to U3(00pi) Matrix Representation\n\nZ = beginpmatrix\n1  0 \n0  -1\nendpmatrix\n\nqc = QCircuit(1)\nqc.z(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#S","page":"Single-qubit gates s","title":"S","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"S","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.S","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.S","text":"S(qubit::Qubit)\n\nSingle-qubit S gate, equivalent to U3(00fracpi2). This  gate is also referred to a square-root of Pauli-Z. Matrix Representation\n\nS = beginpmatrix\n1  0 \n0  i\nendpmatrix\n\nqc = QCircuit(1)\nqc.s(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Sd","page":"Single-qubit gates s","title":"Sd","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Sd","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Sd","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Sd","text":"Sd(qubit::Qubit) Single-qubit, hermitian conjugate of the S. This is also an alternative square root of  the Z.  Matrix Representation\n\nS^dagger = beginpmatrix\n1  0 \n0  -i\nendpmatrix\n\nqc = QCircuit(1)\nqc.sd(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#T","page":"Single-qubit gates s","title":"T","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"T","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.T","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.T","text":"T(qubit::Qubit)\n\nSingle-qubit T gate, equivalent to U3(00fracpi4). This  gate is also referred to as a fracpi8 gate or as a fourth-root of Pauli-Z.  Matrix Representation\n\nT = beginpmatrix\n1  0 \n0  e^ipi4\nendpmatrix\n\nqc = QCircuit(1)\nqc.t(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Td","page":"Single-qubit gates s","title":"Td","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Td","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Td","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Td","text":"Td(qubit::Qubit)\n\nSingle-qubit, hermitian conjugate of the T. This gate is equivalent to U3(00-fracpi4). This  gate is also referred to as the fourth-root of Pauli-Z.  Matrix Representation\n\nT^dagger = beginpmatrix\n1  0 \n0  e^-ipi4\nendpmatrix\n\nqc = QCircuit(1)\nqc.td(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Sx","page":"Single-qubit gates s","title":"Sx","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Sx","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Sx","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Sx","text":"Sx(qubit::Qubit)\n\nSingle-qubit square root of pauli-X. Matrix Representation\n\nsqrtX = frac12 beginpmatrix\n1 + i  1 - i \n1 - i  1 + i\nendpmatrix\n\nqc = QCircuit(1)\nqc.sx(0)\n\n\n\n\n\n","category":"type"},{"location":"0_Single-qubit-gates/#Sxd","page":"Single-qubit gates s","title":"Sxd","text":"","category":"section"},{"location":"0_Single-qubit-gates/","page":"Single-qubit gates s","title":"Single-qubit gates s","text":"Sxd","category":"page"},{"location":"0_Single-qubit-gates/#QuantumCircuits.QCircuits.Gates.Sxd","page":"Single-qubit gates s","title":"QuantumCircuits.QCircuits.Gates.Sxd","text":"Sxd(qubit::Qubit)\n\nSingle-qubit hermitian conjugate of the square root of pauli-X, or the Sx. Matrix Representation\n\nsqrtX^dagger = frac12 beginpmatrix\n1 - i  1 + i \n1 + i  1 - i\nendpmatrix\n\nqc = QCircuit(1)\nqc.sxd(0)\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Graph/#QuantumCircuits.QCircuits.Graph","page":"Graph","title":"QuantumCircuits.QCircuits.Graph","text":"","category":"section"},{"location":"QCircuits/Graph/","page":"Graph","title":"Graph","text":"Modules = [QuantumCircuits.QCircuits.Graph]","category":"page"},{"location":"QCircuits/Graph/#QuantumCircuits.QCircuits.Graph.StartEndNode","page":"Graph","title":"QuantumCircuits.QCircuits.Graph.StartEndNode","text":"The index of start and end node.\n\n\n\n\n\n","category":"constant"},{"location":"QCircuits/Graph/#QuantumCircuits.QCircuits.Graph.DirectedGraph","page":"Graph","title":"QuantumCircuits.QCircuits.Graph.DirectedGraph","text":"Circuit direct graph structure\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Graph/#QuantumCircuits.QCircuits.Graph.DirectedGraph-Union{Tuple{Int64}, Tuple{IndexT}} where IndexT<:Integer","page":"Graph","title":"QuantumCircuits.QCircuits.Graph.DirectedGraph","text":"Create new empyt graph\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Graph/#QuantumCircuits.QCircuits.Graph.qubitToLine-Tuple{Any}","page":"Graph","title":"QuantumCircuits.QCircuits.Graph.qubitToLine","text":"Mapping from qubit number to line number.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Graph/#QuantumCircuits.QCircuits.QBase.add!-Union{Tuple{IndexT}, Tuple{QuantumCircuits.QCircuits.Graph.DirectedGraph{IndexT}, QuantumGate}} where IndexT<:Integer","page":"Graph","title":"QuantumCircuits.QCircuits.QBase.add!","text":"Add gate to circuit\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates","page":"Gates","title":"QuantumCircuits.QCircuits.Gates","text":"","category":"section"},{"location":"QCircuits/Gates/","page":"Gates","title":"Gates","text":"Modules = [QuantumCircuits.QCircuits.Gates]\nFilter = t -> !(typeof(t) === DataType && t in Set([\n    QuantumCircuits.QCircuits.Gates.U3,\n    QuantumCircuits.QCircuits.Gates.Rx,\n    QuantumCircuits.QCircuits.Gates.Ry,\n    QuantumCircuits.QCircuits.Gates.Rz,\n    QuantumCircuits.QCircuits.Gates.H,\n    QuantumCircuits.QCircuits.Gates.X,\n    QuantumCircuits.QCircuits.Gates.Y,\n    QuantumCircuits.QCircuits.Gates.Z,\n    QuantumCircuits.QCircuits.Gates.S,\n    QuantumCircuits.QCircuits.Gates.Sd,\n    QuantumCircuits.QCircuits.Gates.T,\n    QuantumCircuits.QCircuits.Gates.Td,\n    QuantumCircuits.QCircuits.Gates.Sx,\n    QuantumCircuits.QCircuits.Gates.Sxd,\n    QuantumCircuits.QCircuits.Gates.CX,]))","category":"page"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.singlequbitsgates","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.singlequbitsgates","text":"The library of single qubit gates\n\n\n\n\n\n","category":"constant"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.ParamT","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.ParamT","text":"Parameter type\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.RotationGate","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.RotationGate","text":"Rotation gates\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.U","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.U","text":"The universar single qubit unitary gate\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.UniversalGate","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.UniversalGate","text":"Quantum Universal Gate\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Gates/#Base.:==-Tuple{QuantumGate, QuantumGate}","page":"Gates","title":"Base.:==","text":"Comparator\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#Base.show-Tuple{IO, QuantumGate}","page":"Gates","title":"Base.show","text":"Show method\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.getqubits-Tuple{QuantumGate}","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.getqubits","text":"Return the qubits on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.getqubitsids-Tuple{QuantumGate}","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.getqubitsids","text":"Return the qubits ids on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.toU3-Tuple{QuantumCircuits.QCircuits.Gates.X}","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.toU3","text":"Convert gate to U3 gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.u3matrix-Tuple{Any, Any, Any}","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.u3matrix","text":"Return the gate matrix\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.QBase.simplify-Tuple{QuantumGate}","page":"Gates","title":"QuantumCircuits.QCircuits.QBase.simplify","text":"The simplify the gates.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.QBase.standardGateError","page":"Gates","title":"QuantumCircuits.QCircuits.QBase.standardGateError","text":"Method return the error of standard gate\n\n\n\n\n\n","category":"function"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.@rotationGate-Tuple{Any, Any}","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.@rotationGate","text":"Rotation macro\n\n\n\n\n\n","category":"macro"},{"location":"QCircuits/Gates/#QuantumCircuits.QCircuits.Gates.@singleQubitGate-Tuple{Any, Any}","page":"Gates","title":"QuantumCircuits.QCircuits.Gates.@singleQubitGate","text":"Single qubit create macro\n\n\n\n\n\n","category":"macro"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase","page":"QBase","title":"QuantumCircuits.QCircuits.QBase","text":"","category":"section"},{"location":"QCircuits/QBase/","page":"QBase","title":"QBase","text":"Modules = [QuantumCircuits.QCircuits.QBase]","category":"page"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.QuantumCircuit","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.QuantumCircuit","text":"Quantum Circuit object\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.QuantumDevice","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.QuantumDevice","text":"Quantum davice, it may be simulator or real hardware.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.QuantumGate","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.QuantumGate","text":"Quantum Gate\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.QuantumObject","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.QuantumObject","text":"Quantum object :)\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.add!-Tuple{QuantumCircuit, QuantumGate}","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.add!","text":"The quantum gates\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.bindparameters!-Tuple{QuantumCircuits.QCircuits.QBase.QuantumObject}","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.bindparameters!","text":"Bind the parameters to the quantum object\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.setparameters!-Tuple{QuantumCircuits.QCircuits.QBase.QuantumObject, Any}","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.setparameters!","text":"Set the parameters to the quantum object\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.simplify-Tuple{QuantumCircuits.QCircuits.QBase.QuantumObject}","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.simplify","text":"Simplify the quantum object\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.standardGateError-Tuple{QuantumCircuits.QCircuits.QBase.QuantumObject}","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.standardGateError","text":"Method return the error of standard gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/QBase/#QuantumCircuits.QCircuits.QBase.tomatrix-Tuple{QuantumCircuits.QCircuits.QBase.QuantumObject}","page":"QBase","title":"QuantumCircuits.QCircuits.QBase.tomatrix","text":"Get the matrix version of the quantum object.\n\n\n\n\n\n","category":"method"},{"location":"quickguide/#Quick-Start-Guide","page":"Quick Start guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/#Installation","page":"Quick Start guide","title":"Installation","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"QuantumCircuits is in the general registry so you can install it by:","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"julia> import Pkg\njulia> Pkg.add(\"QuantumCircuits\")","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Note: The library require  Qiskit installed. You can do this running the 'pip install qiskit qiskit.ignis matplotlib' command.","category":"page"},{"location":"quickguide/#Usage","page":"Quick Start guide","title":"Usage","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"using QuantumCircuits\nusing QuantumCircuits.Execute","category":"page"},{"location":"quickguide/#Introduction","page":"Quick Start guide","title":"Introduction","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"We have various types of backends at our disposal, the simulator written in Julia, the Qiskit simulator, or real device available by Qiskit.","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"# We use the simulator written in Julia\nconst backend = QuantumSimulator()\n\n# Let's create an example circuit.\nqc1 = QCircuit(2)\nqc1.x(0)\nqc1.h(1)\nqc1.cx(0, 1)\nqc1","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"      ┌───┐     \nq0_0: ┤ X ├──■──\n      ├───┤┌─┴─┐\nq0_1: ┤ H ├┤ X ├\n      └───┘└───┘\nc0: 2/══════════","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Now, we can execute it. Because there is no measurement, we measure all qubits.","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"execute(backend, qc1)","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"4-element Vector{Float64}:\n 0.0\n 0.4999999999999999\n 0.0\n 0.5000000000000001","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"We can also add measurement explicitly.","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"qc1.measure(1, 1)\nqc1","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"      ┌───┐        \nq1_0: ┤ X ├──■─────\n      ├───┤┌─┴─┐┌─┐\nq1_1: ┤ H ├┤ X ├┤M├\n      └───┘└───┘└╥┘\nc1: 2/═══════════╩═\n                 1 ","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"execute(backend, qc1)","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"2-element Vector{Float64}:\n 0.4999999999999999\n 0.5000000000000001","category":"page"},{"location":"quickguide/#Registers","page":"Quick Start guide","title":"Registers","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"We can also create circuit with registers directly.","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"qr = QuantumRegister(3)\ncr = ClassicalRegister(2)\nqc = QCircuit(qr, cr)\nqc.h(0)\nqc.x(1)\nqc.x(2)\nqc.measure([0, 1], [0, 1])\nqc","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"      ┌───┐┌─┐   \nq2_0: ┤ H ├┤M├───\n      ├───┤└╥┘┌─┐\nq2_1: ┤ X ├─╫─┤M├\n      ├───┤ ║ └╥┘\nq2_2: ┤ X ├─╫──╫─\n      └───┘ ║  ║ \nc2: 2/══════╩══╩═\n            0  1 ","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"execute(backend, qc)","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"4-element Vector{Float64}:\n 0.0\n 0.0\n 0.5000000000000001\n 0.4999999999999999","category":"page"},{"location":"quickguide/#Bug-reports-and-Contributing","page":"Quick Start guide","title":"Bug reports and Contributing","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"Please report any issues via the Github issue tracker. All types of issues are welcome and encouraged; this includes bug reports, documentation typos, feature requests, etc. ","category":"page"},{"location":"quickguide/","page":"Quick Start guide","title":"Quick Start guide","text":"QuantumCircuits is being actively developed and suggestions or other forms of contributions are encouraged. ","category":"page"},{"location":"Execute/#Execute","page":"Execute","title":"Execute","text":"","category":"section"},{"location":"Execute/","page":"Execute","title":"Execute","text":"Modules = [QuantumCircuits.Execute]","category":"page"},{"location":"Execute/#QuantumCircuits.Execute.QiskitQuantum","page":"Execute","title":"QuantumCircuits.Execute.QiskitQuantum","text":"Qiskit Quantum Device\n\n\n\n\n\n","category":"type"},{"location":"Execute/#QuantumCircuits.Execute.QuantumSimulator","page":"Execute","title":"QuantumCircuits.Execute.QuantumSimulator","text":"Quantum Simulator\n\n\n\n\n\n","category":"type"},{"location":"Execute/#QuantumCircuits.Execute.execute","page":"Execute","title":"QuantumCircuits.Execute.execute","text":"Function execute the quantum circuit on simulator\n\n\n\n\n\n","category":"function"},{"location":"Execute/#QuantumCircuits.Execute.getShift-Tuple{Any, Any}","page":"Execute","title":"QuantumCircuits.Execute.getShift","text":"Function return the shift\n\n\n\n\n\n","category":"method"},{"location":"Execute/#QuantumCircuits.Execute.loss_expected_zero_state-Tuple{Any}","page":"Execute","title":"QuantumCircuits.Execute.loss_expected_zero_state","text":"Loss method to check if final state is zero.\n\n\n\n\n\n","category":"method"},{"location":"Execute/#QuantumCircuits.Execute.qderivative","page":"Execute","title":"QuantumCircuits.Execute.qderivative","text":"Caclulate loss value and it derivateive\n\n\n\n\n\n","category":"function"},{"location":"Execute/#QuantumCircuits.Execute.qexecute","page":"Execute","title":"QuantumCircuits.Execute.qexecute","text":"Caclulate the the value.\n\n\n\n\n\n","category":"function"},{"location":"Execute/#QuantumCircuits.Execute.qjacobian","page":"Execute","title":"QuantumCircuits.Execute.qjacobian","text":"Caclulate the jacobian on device.\n\n\n\n\n\n","category":"function"},{"location":"Execute/#QuantumCircuits.Execute.setAndConvert-Tuple{Any, Vector{<:Number}}","page":"Execute","title":"QuantumCircuits.Execute.setAndConvert","text":"Set the parameters to the cicquit and convert to qiskit\n\n\n\n\n\n","category":"method"},{"location":"Execute/#QuantumCircuits.Execute.state2probability-Tuple{Any}","page":"Execute","title":"QuantumCircuits.Execute.state2probability","text":"Method convert state to probability\n\n\n\n\n\n","category":"method"},{"location":"Execute/#QuantumCircuits.Execute.@bra_str-Tuple{Any}","page":"Execute","title":"QuantumCircuits.Execute.@bra_str","text":"Macro proces ket binary vector to quantum state\n\n\n\n\n\n","category":"macro"},{"location":"Execute/#QuantumCircuits.Execute.@ket_str-Tuple{Any}","page":"Execute","title":"QuantumCircuits.Execute.@ket_str","text":"Macro proces ket binary vector to quantum state\n\n\n\n\n\n","category":"macro"},{"location":"QML/Optimization/#QuantumCircuits.QML.Optimization","page":"Optimization","title":"QuantumCircuits.QML.Optimization","text":"","category":"section"},{"location":"QML/Optimization/","page":"Optimization","title":"Optimization","text":"Modules = [QuantumCircuits.QML.Optimization]","category":"page"},{"location":"QML/Optimization/#QuantumCircuits.QML.Optimization.Adam","page":"Optimization","title":"QuantumCircuits.QML.Optimization.Adam","text":"Adam optimization algoritm\n\n\n\n\n\n","category":"type"},{"location":"QML/Optimization/#QuantumCircuits.QML.Optimization.Eva","page":"Optimization","title":"QuantumCircuits.QML.Optimization.Eva","text":"Evolutionary Alpha optimization algoritm\n\n\n\n\n\n","category":"type"},{"location":"QML/Optimization/#QuantumCircuits.QML.Optimization.Momentum","page":"Optimization","title":"QuantumCircuits.QML.Optimization.Momentum","text":"Momentum optimization algoritm\n\n\n\n\n\n","category":"type"},{"location":"QML/Optimization/#QuantumCircuits.QML.Optimization.RMSprop","page":"Optimization","title":"QuantumCircuits.QML.Optimization.RMSprop","text":"RMSprop optimization algoritm\n\n\n\n\n\n","category":"type"},{"location":"QML/Optimization/#QuantumCircuits.QML.Optimization.StandardGD","page":"Optimization","title":"QuantumCircuits.QML.Optimization.StandardGD","text":"Standard gradient descent\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit","text":"","category":"section"},{"location":"QCircuits/Circuit/","page":"Circuit","title":"Circuit","text":"Modules = [QuantumCircuits.QCircuits.Circuit]","category":"page"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.QCircuit","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.QCircuit","text":"Quantum circuit.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Circuit/#Base.show-Tuple{IO, QCircuit}","page":"Circuit","title":"Base.show","text":"Show method\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.getRandParameters-Tuple{QCircuit}","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.getRandParameters","text":"Function create new random parameters vector\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.getparameters-Tuple{QCircuit}","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.getparameters","text":"Function create new parameters vector\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.nop","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.nop","text":"Nothing function\n\n\n\n\n\n","category":"function"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.setClassicalRegister!-Tuple{QCircuit, ClassicalRegister}","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.setClassicalRegister!","text":"Add the classical register to circuit.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.toQiskit-Tuple{QCircuit}","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.toQiskit","text":"Function to convert QCircuit to Qiskit circuit\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.QBase.add!-Tuple{QCircuit, QuantumGate}","page":"Circuit","title":"QuantumCircuits.QCircuits.QBase.add!","text":"Add gate to circuit\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.QBase.bindparameters!-Tuple{QCircuit}","page":"Circuit","title":"QuantumCircuits.QCircuits.QBase.bindparameters!","text":"Function bind the parameters, so now there only values.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.QBase.measure!","page":"Circuit","title":"QuantumCircuits.QCircuits.QBase.measure!","text":"Add measures to circuit\n\n\n\n\n\n","category":"function"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.QBase.measure!-2","page":"Circuit","title":"QuantumCircuits.QCircuits.QBase.measure!","text":"Add measures to circuit\n\n\n\n\n\n","category":"function"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.QBase.setparameters!-Tuple{QCircuit, Any}","page":"Circuit","title":"QuantumCircuits.QCircuits.QBase.setparameters!","text":"Save the parameters to the quantum circuits.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Circuit/#QuantumCircuits.QCircuits.Circuit.@addfunction-Tuple{Any, Any}","page":"Circuit","title":"QuantumCircuits.QCircuits.Circuit.@addfunction","text":"Add function macro\n\n\n\n\n\n","category":"macro"},{"location":"QCircuits/ComplexGates/#QuantumCircuits.QCircuits.ComplexGates","page":"ComplexGates","title":"QuantumCircuits.QCircuits.ComplexGates","text":"","category":"section"},{"location":"QCircuits/ComplexGates/","page":"ComplexGates","title":"ComplexGates","text":"Modules = [QuantumCircuits.QCircuits.ComplexGates]","category":"page"},{"location":"QCircuits/ComplexGates/#QuantumCircuits.QCircuits.ComplexGates.U4","page":"ComplexGates","title":"QuantumCircuits.QCircuits.ComplexGates.U4","text":"Universary two qubits gate.\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/ComplexGates/#QuantumCircuits.QCircuits.Gates.getqubits-Tuple{QuantumCircuits.QCircuits.ComplexGates.U4}","page":"ComplexGates","title":"QuantumCircuits.QCircuits.Gates.getqubits","text":"Return the qubits on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/ComplexGates/#QuantumCircuits.QCircuits.Gates.getqubitsids-Tuple{QuantumCircuits.QCircuits.ComplexGates.U4}","page":"ComplexGates","title":"QuantumCircuits.QCircuits.Gates.getqubitsids","text":"Return the qubits ids on which operate the gate\n\n\n\n\n\n","category":"method"},{"location":"#QuantumCircuits.jl","page":"Introduction","title":"QuantumCircuits.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"QuantumCircuits is an open-source library for working with quantum computers at the application level, especially for Quantum Machine Learning and Quantum Finance.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Library QuantumCircuits contains the following modules:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"QCircuits - the module used to create quantum circuits, manipulate them and convert them to Qiskit if necessary.\nExecute - module to execute the quantum circuit on a Julia quantum simulator or on a real device using Qiskit.\nQML - Quantum Machine learning module which contains the optimization method and QML tools.","category":"page"},{"location":"QCircuits/Math/#QuantumCircuits.QCircuits.Math","page":"Math","title":"QuantumCircuits.QCircuits.Math","text":"","category":"section"},{"location":"QCircuits/Math/","page":"Math","title":"Math","text":"Modules = [QuantumCircuits.QCircuits.Math]","category":"page"},{"location":"QCircuits/Math/#QuantumCircuits.QCircuits.Math.eye-Tuple{Any}","page":"Math","title":"QuantumCircuits.QCircuits.Math.eye","text":"Return the identity matrix.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Math/#QuantumCircuits.QCircuits.Math.matrix_norm-Tuple{Any}","page":"Math","title":"QuantumCircuits.QCircuits.Math.matrix_norm","text":"Calculate the matrix norm\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Math/#QuantumCircuits.QCircuits.Math.min_observe_unitary_error-Tuple{Any, Any}","page":"Math","title":"QuantumCircuits.QCircuits.Math.min_observe_unitary_error","text":"Calculate the minimum observe unitary matrix error.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Math/#QuantumCircuits.QCircuits.Math.observe_unitary_error","page":"Math","title":"QuantumCircuits.QCircuits.Math.observe_unitary_error","text":"Calculate the observe unitary matrix error, the error which we can obserwe from quantum state\n\n\n\n\n\n","category":"function"},{"location":"QCircuits/Math/#QuantumCircuits.QCircuits.Math.unitary_error-Tuple{Any, Any}","page":"Math","title":"QuantumCircuits.QCircuits.Math.unitary_error","text":"Calculate the unitary matrix error\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers","page":"Registers","title":"QuantumCircuits.QCircuits.Registers","text":"","category":"section"},{"location":"QCircuits/Registers/","page":"Registers","title":"Registers","text":"Modules = [QuantumCircuits.QCircuits.Registers]","category":"page"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.Bit","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.Bit","text":"The abstract bit\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.Cbit","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.Cbit","text":"Classical bit\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.Qubit","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.Qubit","text":"Quantum bit\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.Register","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.Register","text":"The abstract register\n\n\n\n\n\n","category":"type"},{"location":"QCircuits/Registers/#Base.eachindex-Tuple{QuantumCircuits.QCircuits.Registers.Register}","page":"Registers","title":"Base.eachindex","text":"Each index method\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#Base.getindex-Tuple{QuantumCircuits.QCircuits.Registers.Register, Integer}","page":"Registers","title":"Base.getindex","text":"Get bit from register on given index.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#Base.iterate-Tuple{QuantumCircuits.QCircuits.Registers.Register}","page":"Registers","title":"Base.iterate","text":"Iterable method\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#Base.length-Tuple{QuantumCircuits.QCircuits.Registers.Register}","page":"Registers","title":"Base.length","text":"The size of register.\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#Base.size-Tuple{QuantumCircuits.QCircuits.Registers.Register}","page":"Registers","title":"Base.size","text":"Size\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.getid-Tuple{QuantumCircuits.QCircuits.Registers.Bit}","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.getid","text":"Get bit index\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.setid-Tuple{QuantumCircuits.QCircuits.Registers.Bit, Integer}","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.setid","text":"Get bit index\n\n\n\n\n\n","category":"method"},{"location":"QCircuits/Registers/#QuantumCircuits.QCircuits.Registers.@register-Tuple{Any, Any}","page":"Registers","title":"QuantumCircuits.QCircuits.Registers.@register","text":"Register macro\n\n\n\n\n\n","category":"macro"}]
}
